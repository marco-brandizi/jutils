<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	
  <modelVersion>4.0.0</modelVersion>

  <groupId>uk.ac.ebi</groupId>
  <artifactId>jutils</artifactId>
  <version>15.0.1-SNAPSHOT</version>
  
  
  <name>JUtils - Miscellanea of Java Utils</name>
  <description>
  	General utility code for several purposes.

  	This project is an empty container of POM type. Most of the real stuff
  	is in jutils and extensions are linked from here as modules.
  
  	The project originated in the ISA-Tools project (http://isa-tools.org).
  </description>
  <url>https://github.com/marco-brandizi/jutils</url>

  <!-- Developer Listing -->
  <developers>
    <developer>
      <id>brandizi</id>
      <name>Marco Brandizi</name>
      <email>marco.brandizi@gmail.com</email>
      <timezone>0</timezone>
      <properties />
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <slf4j.version>2.0.16</slf4j.version>
   	<spring.version>6.1.14</spring.version>
  </properties>

  <scm>
  	<developerConnection>scm:git:https://github.com/marco-brandizi/jutils.git</developerConnection>
    <tag>HEAD</tag>
    
  </scm>   
  
	<dependencies>
	
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		
		<!-- The policy is to use these bridges where needed, due to transitive deps -->			
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		
		<!-- An SLF4J extension, which allows for log levels (http://projects.lidalia.org.uk/lidalia-slf4j-ext/) -->
		<dependency>
		  <groupId>uk.org.lidalia</groupId>
		  <artifactId>lidalia-slf4j-ext</artifactId>
		  <version>1.0.0</version>
		  <exclusions>
		  	<exclusion>
		  		<groupId>com.google.guava</groupId>
		  		<artifactId>guava</artifactId>
		  	</exclusion>
		  </exclusions>
		</dependency>

		<!-- Lidalia uses this, but an older version.  -->
		<dependency>
		  <groupId>com.google.guava</groupId>
		  <artifactId>guava</artifactId>
			<version>33.3.1-jre</version>
		</dependency>		

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.17.0</version>
		</dependency>
		
		<dependency>
		  <groupId>org.apache.commons</groupId>
		  <artifactId>commons-text</artifactId>
		  <version>1.12.0</version>
		</dependency>		

	  <dependency>
	    <groupId>junit</groupId>
	    <artifactId>junit</artifactId>
	    <version>4.13.2</version>
	  </dependency>
	  		
		<!-- Little nice utility that improves exception handling --> 
		<dependency>
		  <groupId>com.machinezoo.noexception</groupId>
		  <artifactId>noexception</artifactId>
		  <version>1.9.1</version>
		</dependency>

		
		<!-- TEST -->

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.4.14</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Helpers to do things like capturing System.out -->
		<dependency>
		  <groupId>com.github.stefanbirkner</groupId>
		  <artifactId>system-rules</artifactId>
		  <version>1.19.0</version>
		  <scope>test</scope>
		</dependency>
		
		<!-- 
			OPTIONAL dependencies. These are not so general, so we don't force jutils's clients to
			drag too much stuff with them. You need to declare these dependencies in your project in order
			to use the jutils functions related to them.
			
			For each optional dependency declared here, jutils packages that requires them are listed. 
			You typically need the dependency for sub-packages as well.
			
			If a jutils package make use of any optional dependency, it has the prefix 
			uk.ac.ebi.utils.opt.* Moreover, usually the artifactId is reused as base name for the 
			jutils package.
			
			The above rules should make it easy to match jutils dependencies with optional 3rd-party dependencies
			they rely upon when used.
			
			TODO: Use this approach to turn jutils back to a single package. 
		-->
		
		<!-- Required by:
			uk.ac.ebi.utils.opt.springweb
		-->
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-webmvc</artifactId>
		  <version>${spring.version}</version>
		  <optional>true</optional>
		</dependency>		

		<!-- Required by
			uk.ac.ebi.utils.opt.net.exceptions
		-->		
		<dependency>
		  <groupId>org.apache.httpcomponents.core5</groupId>
		  <artifactId>httpcore5</artifactId>
		  <version>5.3</version>
		  <optional>true</optional>
		</dependency>		

		<!-- Required by uk.ac.ebi.utils.opt.net.ConfigBootstrapWebListener -->
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.1.0</version>
			<optional>true</optional>
		</dependency>

		<!-- Required by
			uk.ac.ebi.utils.opt.io
			uk.ac.ebi.utils.opt.config
		-->		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.17.0</version>
			<optional>true</optional>
		</dependency>

		<!-- Required by
			uk.ac.ebi.utils.opt.io.Unix4jUtils
			uk.ac.ebi.utils.opt.xml.XmlFilterUtils			
		-->		
		<dependency>
			<groupId>org.unix4j</groupId>
			<artifactId>unix4j-command</artifactId>
			<version>0.6</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>net.sf.jsignature.io-tools</groupId>
			<artifactId>easystream</artifactId>
			<version>1.2.15</version>
			<optional>true</optional>
		</dependency>
		

		<!-- Required by
		  uk.ac.ebi.utils.opt.net.SSLUtils
		-->
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5</artifactId>
			<version>5.4</version>
			<!-- TODO: remove, comes from older versions 
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
			-->
			<optional>true</optional>			
		</dependency>
		
		<!-- Required by
			uk.ac.ebi.utils.opt.orm.test.TestEntityMgrProvider
		-->
		<dependency>
		  <groupId>org.hibernate.javax.persistence</groupId>
		  <artifactId>hibernate-jpa-2.1-api</artifactId>
		  <version>1.0.2.Final</version>
			<optional>true</optional>		  
		</dependency>
		
		<!-- Required by 
		  uk.ac.ebi.utils.opt.config
		  uk.ac.ebi.utils.opt.json
		-->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>2.18.0</version>
		</dependency>
		
		<!-- Required by 
		  uk.ac.ebi.utils.opt.json
		  
		  Here, we can omit it since jackson-dataformat-yaml already includes it
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>		
		-->
		
		<!-- 
			Required by uk.ac.ebi.utils.opt.runcontrol.ReactorUtils
		-->
		<dependency>
		  <groupId>io.projectreactor</groupId>
		  <artifactId>reactor-core</artifactId>
		  <version>3.6.10</version>
		  <optional>true</optional>
		</dependency>			
		
		
	</dependencies>

	<build>

		<plugins>
		
      <plugin>
	      <artifactId>maven-compiler-plugin</artifactId>
	      <version>3.13.0</version>
	      <configuration>
	      	<release>17</release>
	        <encoding>utf-8</encoding>
	      </configuration>
	    </plugin>
	
	    <plugin>
		    <artifactId>maven-source-plugin</artifactId>
		    <version>3.3.1</version>
		    <executions>
		      <execution>
		        <id>attach-source</id>
		        <goals>
		          <goal>jar</goal>
		        </goals>
		      </execution>
		    </executions>
	    </plugin>

		  <plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-surefire-plugin</artifactId>
		    <version>3.5.1</version>
		    <configuration>
		      <properties>
		        <property>
		        	<!-- Prints out spaces and test name before/after every test method and automatically -->
		          <name>listener</name>
		          <value>uk.ac.ebi.utils.test.junit.TestOutputDecorator</value>
		      	</property>
		      </properties>
					<environmentVariables>
						<yamlUtils_testName>Dude</yamlUtils_testName>
					</environmentVariables>
		    	<forkCount>0.5C</forkCount>
		    </configuration>
		  </plugin>
		  
		  <plugin>
		    <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
		    <version>3.3.1</version>
		  </plugin>
		  
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<!-- TODO: the Markdown doclet doesn't work with JDK11 -->
					<useStandardDocletOptions>false</useStandardDocletOptions>
          <additionalOptions>-Xdoclint:none</additionalOptions>
					<!-- 
						TODO: apidocs/ is always appended to this, see 
						https://issues.apache.org/jira/browse/MJAVADOC-818
					-->
          <outputDirectory>${project.basedir}/docs</outputDirectory>
				</configuration>
			</plugin>
		  		
    </plugins>
	

    <testResources>
	    <testResource>
	      <directory>src/test/resources</directory>
	      <filtering>true</filtering>
	    </testResource>
    </testResources>

    <resources>
	    <resource>
	      <directory>src/main/resources</directory>
	      <filtering>true</filtering>
	    </resource>
    </resources>

	</build>
	  
	<distributionManagement>
	
    <snapshotRepository>
    	<id>marcobrandizi.info</id>
			<url>https://artifactory.marcobrandizi.info/public</url>
    </snapshotRepository>

    <repository>
    	<id>marcobrandizi.info</id>
			<url>https://artifactory.marcobrandizi.info/public</url>
    </repository>

	</distributionManagement>  

</project>
